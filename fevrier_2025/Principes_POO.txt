=> Les grands principes :
-- YAGNI (You Ain't Gonna Need It)
-- KISS  (Keep It Simple, Stupid)
-- DRY   (Don't Repeat Yourself)

-- SOLID :
--- Single responsibility Principle (SRP)
-----> Une classe doit avoir une responsabilite unique

--- Open/Close Principle (OCP)
-----> ouvert a l'extension, fermé a la modification

--- Liskov Substituion Principle (LSP)
-----> Substituion des sous-classes à leurs classes parents


--- Interface Segregation Principle (ISP)
-----> Plusieurs petites interfaces, plutôt qu'une grande

--- Dependancy Inversion Principle (DIP)
-----> Inversion des dépendances
-----> Dépendre d'abstractions plutôt que d'implémentations concrétes

(GRASP) : General responsibility assignment software patterns
- Créateur
- Contrôleur
- Forte cohesion
- Faible couplage

-- SOC : Seperation of Concerns
-----> Séparer les responsabilitees : 
-----> Par exemple, MVC : Model View Controller

-- COC : Convention over Configuration
-----> Favoriser des choix par défaut

-- TDD : Test Driven Development
-----> Pratique de développement où l'on écrit les tests avant le code 

-- BDD : Behaviour Driven Development
-----> Extension du TDD, avec une orientation métier
// GIVEN
// WHEN
// THEN

-- DDD : Domain Driven Design
-----> Conception logicielle qui se concentre sur le métier


-- Lombok    -> Generer du code automatique (Boiler code)
=> Spring Boot : 
-- Spring Test
-- Spring Batch

--
-- ArchUnit
-- Spring Http Client (RestTemplate / WebClient..)

-- ModelMapper - MapStruct -> Conversion (D'une entitee vers un Dto par exemple...)
-- Detection d'un dossier avant declenchement du batch
-- Declenchement programmé

=> Qualité de code :
- ArchUnit
- Tests unitaires
- Tests d'integration
- SonarQube
- Les logs
